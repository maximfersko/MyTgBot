const TelegramApi = require("node-telegram-bot-api");
const axios = require("axios");
const { tokenTg, qiwiTokenS, walletNumQiwi } = require("./token");
const token = qiwiTokenS;
const qiwiToken = tokenTg;
const { music, hello, theAllCategory } = require("./optionsM");
const fs = require("fs");
const { time } = require("console");
const callbackQiwi = require("node-qiwi-api").callbackApi;
const callbackWallet = new callbackQiwi(qiwiToken);

const wallet = walletNumQiwi;

const bot = new TelegramApi(token, {
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: {
        timeout: 10,
      },
    },
  },
});

bot.setMyCommands[
  ({
    command: "/start",
    description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Å—Ç–≤–∏–µ",
  },
  {
    command: "/info",
    description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ",
  })
];

const main = () => {
  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const firstName = msg.from.first_name;

    const helloHTML = ` –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${firstName}, –∑–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å  –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ <strong>Spotify, Apple Music</strong> , –∏ –ø—Ä–æ—á–∏–µ –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å—ã `;
    const allCategory = `<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: </b>`;
    const rules = `‚ûñ‚ûñ‚ûñ <strong> –ü—Ä–∞–≤–∏–ª–∞ </strong> ‚ûñ‚ûñ‚ûñ \n \n 1. –ó–∞–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –≤ —Ç–æ —Å–ª—É—á–∞–µ –µ—Å–ª–∏: \n‚ùóÔ∏è–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∫ –∫—É–ø–ª–µ–Ω–Ω–æ–º—É –≤–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç—É.  \n‚ùóÔ∏è–¢–æ–≤–∞—Ä —Å–ø—É—Å—Ç—è –≤—Ä–µ–º—è —Å—Ç–∞–ª –Ω–µ–≤–∞–¥–∏–¥–Ω—ã–π, –∞ –≥–∞—Ä–∞–Ω—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å (–≥–∞—Ä–∞–Ω—Ç–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞) \n‚ùóÔ∏è–í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∑–∞–º–µ–Ω—ã –Ω–µ—Ç!\n \n2. –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –∑–∞–º–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:\n‚ùóÔ∏è–í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏.\n‚ùóÔ∏è–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.\n‚ùóÔ∏è–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã - 2 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`;
    const help = `–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @maximfersco (–≤–ª–∞–¥–µ–ª–µ—Ü) \n–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: '-'`;
    const items = `‚ûñ‚ûñ‚ûñ <strong> –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ </strong> ‚ûñ‚ûñ‚ûñ \n \n 1. Apple Music (100 —à—Ç—É–∫)`;

    if (text === "/start") {
      bot.sendSticker(
        chatId,
        "https://tlgrm.ru/_/stickers/88e/586/88e586f0-4299-313f-bedb-ef45c7710422/1.webp"
      );
      return bot.sendMessage(chatId, helloHTML, hello);
    } else if (text === "üõí–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") {
      return bot.sendMessage(chatId, allCategory, theAllCategory);
    } else if (text === "‚úÖ–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞") {
      return bot.sendMessage(chatId, items, {
        parse_mode: "HTML",
      });
    } else if (text === "üìñ–ü—Ä–∞–≤–∏–ª–∞") {
      return bot.sendMessage(chatId, rules, {
        parse_mode: "HTML",
      });
    } else if (text === "üÜò–ü–æ–º–æ—â—å") {
      return bot.sendMessage(chatId, help, {
        parse_mode: "HTML",
      });
    } else if (text === "console") {
      console.log(msg);
    } else {
      return bot.sendMessage(chatId, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ !");
    }
  });
  bot.on("callback_query", async (query) => {
    const queryId = query.message.chat.id;
    const dataF = fs.readFileSync("./keys.txt", "utf-8");
    //  const lastName = msg.from.last_name;
    const textForMusic = `‚ûñ‚ûñ‚ûñ Music ‚ûñ‚ûñ‚ûñ \n \n  –ü—Ä–æ–º–æ–∫–æ–¥ Apple Music –†–§ 1 –º–µ—Å—è—Ü  | ‚ùó Ã∂1Ã∂5Ã∂9Ã∂ ‚ÇΩ / 50 ‚ÇΩ  ‚ùó| _–ö–æ–ª-–≤–æ_: 100 —à—Ç.`;
    const inf = `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü—Ä–æ–º–æ–∫–æ–¥ Apple Music –†–§ 1 –º–µ—Å—è—Ü. \n–¶–µ–Ω–∞: 50 —Ä—É–±. \n–û–ø–∏—Å–∞–Ω–∏–µ:  –ü—Ä–æ–º–æ-–∫–æ–¥ –¥–ª—è Apple Music –Ω–∞ 1 –º–µ—Å—è—Ü. \n–ö–æ–ª-–≤–æ: 1 —à—Ç. \n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: ${time()}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ`;
    // const user = msg.from.username;
    const querData = query.data;
    const requestOptions = {
      operation: "default",
    };

    function time() {
      let today = new Date();
      let dd = String(today.getDate()).padStart(2, "0");
      let mm = String(today.getMonth() + 1).padStart(2, "0");
      let yyyy = today.getFullYear();
      let hours = String(today.getHours()).padStart(2, "0");
      let minute = String(today.getMinutes()).padStart(2, "0");
      let seconds = String(today.getSeconds()).padStart(2, "0");

      return (today =
        dd +
        "-" +
        mm +
        "-" +
        yyyy +
        "  " +
        hours +
        ":" +
        minute +
        ":" +
        seconds);
    }

    function read(file) {
      let str = file.toString();
      str = str.split("\n");
      //const key = str.length - 1;
      const key = Math.floor(Math.random() * str.length);
      const aw = str[key];
      console.log(str);
      console.log(str[key]);
      console.log(str.length);
      console.log(time);
      return aw;
    }

    switch (querData) {
      case "music":
        bot.sendMessage(queryId, textForMusic, music);
        break;
      case "sub":
        bot.sendMessage(queryId, "–ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã ");
        break;
      case "musicPay":
        bot.sendMessage(
          queryId,
          "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: \nhttps://oplata.qiwi.com/form?invoiceUid=8496356a-b84f-4283-8aff-131106aa2c55"
        );
        bot.sendMessage(
          queryId,
          `<strong>–í–∞—à –∑–∞–∫–∞–∑:</strong> \n ${read(dataF)} `,
          {
            parse_mode: "HTML",
          }
        );
        bot.sendMessage(queryId, inf, {
          parse_mode: "HTML",
        });
        break;
    }
  });
};

main();
